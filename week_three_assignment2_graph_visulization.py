# -*- coding: utf-8 -*-
"""Week Three- Assignment2 Graph Visulization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jySBKirVINDXoWzc7xrly9V7tF_-uQi2

# Week Three- Assignment 2 Graph Visualization

##### Author: Jiaxin Zheng

This week's assignment is to:

1. Load a graph database of your choosing from a text file or other source.  If you take a large network dataset from the web (such as from Stanford Large Network Dataset Collection), please feel free at this point to load just a small subset of the nodes and edges.
2. Create basic analysis on the graph, including the graphâ€™s diameter, and at least one other metric of your choosing.  You may either code the functions by hand (to build your intuition and insight), or use functions in an existing package.
3. Use a visualization tool of your choice (Neo4j, Gephi, etc.) to display information.
4. Please record a short video (~ 5 minutes), and submit a link to the video in advance of our meet-up.

**## Loading the graph dataset**

The dataset I choice is from KONECT. The data is network of books about US politics published around 2004 during presidential election. The books were sold by the online in Amazon.com.  http://konect.cc/networks/dimacs10-polbooks/

1. Nodes: 105 books about U.S.politics
2. Edges: 441 Connections represent books that are frequently co-purchased on Amazon
3. Edge Type: Undirected (two books are linked if frequently bought together)
"""

# import the library
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import urllib.request

url = "https://raw.githubusercontent.com/Jennyjjxxzz/Data-620_Week3/refs/heads/main/out.dimacs10-polbooks"
response = urllib.request.urlopen(url)
data = response.read().decode('utf-8').splitlines()

df = pd.read_csv(url)

display(df.head(10))

edges = []
for line in data:
  if line.startswith("%") :
      continue
  parts = line.split()
  if len(parts) == 2:
    edges.append((parts[0], parts[1]))

# Create an undirected graph and add the edges
G = nx.Graph()
G.add_edges_from(edges)

print("Number of nodes:", G.number_of_nodes())
print("Number of edges:", G.number_of_edges())

"""The most intersting insignt that ID 99, and 100 pops out from the graph. Only get single connection line. Possible explaination: ID99 and 100 could be books that only relate to one other book."""

# Draw the graph
plt.figure(figsize=(8, 6))
pos = nx.spring_layout(G, seed=42)
nx.draw(G, pos, node_size=50, edge_color="gray", alpha=0.6, with_labels=False)
nx.draw_networkx_labels(G, pos, font_size=8, font_color="black")

plt.title("Political Books Network")
plt.show()

"""THe insights from the histogram:
1. Is a right-skewed histogram
2. Peak at degree means many of nodes have 5 connections and more
3. Some nodes have more than 25 connections
"""

# Degree distribution histogram
plt.figure(figsize=(6, 4))
degrees = [deg for _, deg in G.degree()]
plt.hist(degrees, bins=range(min(degrees), max(degrees) + 2), color="lightblue", edgecolor="black")
plt.xlabel("Degree")
plt.ylabel("Frequency")
plt.title("Degree Distribution")
plt.show()

top_books = sorted(G.degree(), key=lambda x: x[1], reverse=True)[:10]
print("Top 10 most co-purchased books:", top_books)